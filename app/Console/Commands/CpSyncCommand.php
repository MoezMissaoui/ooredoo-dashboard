<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\CpIncrementalExport;
use Exception;

class CpSyncCommand extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'cp:sync 
                            {--loop=1 : Nombre de boucles √† ex√©cuter (utile pour initial load)}
                            {--reset : Reset l\'√©tat de synchronisation avant de commencer}
                            {--test : Teste seulement la connexion sans synchroniser}
                            {--state : Affiche l\'√©tat actuel de synchronisation}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Synchronise les donn√©es Club Privil√®ges via l\'API get-pending-sync-data';

    protected $cpExport;

    public function __construct(CpIncrementalExport $cpExport)
    {
        parent::__construct();
        $this->cpExport = $cpExport;
    }

    /**
     * Execute the console command.
     */
    public function handle()
    {
        $this->info('üöÄ [CP Sync] D√©marrage de la synchronisation Club Privil√®ges');

        // Afficher l'√©tat si demand√©
        if ($this->option('state')) {
            $this->showSyncState();
            return self::SUCCESS;
        }

        // Test de connexion si demand√©
        if ($this->option('test')) {
            return $this->testConnection();
        }

        // Reset si demand√©
        if ($this->option('reset')) {
            $this->warn('‚ö†Ô∏è Reset de l\'√©tat de synchronisation...');
            $this->cpExport->resetSyncState();
            $this->info('‚úÖ √âtat r√©initialis√©');
        }

        $loops = (int) $this->option('loop');
        $totalRows = 0;
        $startTime = microtime(true);

        try {
            for ($i = 1; $i <= $loops; $i++) {
                $this->info("üîÑ [CP Sync] Boucle {$i}/{$loops}");

                // R√©cup√©rer les donn√©es
                $response = $this->cpExport->pullOnce();
                
                // Traiter et sauvegarder
                $this->cpExport->upsertAndAdvance($response);

                // Compter les lignes trait√©es
                $rowsInLoop = $this->countRowsInResponse($response);
                $totalRows += $rowsInLoop;

                $this->info("‚úÖ [CP Sync] Boucle {$i} termin√©e - {$rowsInLoop} lignes trait√©es");

                // V√©rifier s'il y a encore des donn√©es √† traiter
                if (!$this->hasMoreData($response)) {
                    $this->info("üèÅ [CP Sync] Toutes les donn√©es ont √©t√© synchronis√©es");
                    break;
                }

                // Petite pause entre les boucles pour √©viter la surcharge
                if ($i < $loops) {
                    sleep(2);
                }
            }

            $duration = round(microtime(true) - $startTime, 2);
            $this->info("üéâ [CP Sync] Synchronisation termin√©e avec succ√®s");
            $this->info("üìä Statistiques: {$totalRows} lignes trait√©es en {$duration}s");

            return self::SUCCESS;

        } catch (Exception $e) {
            $this->error("‚ùå [CP Sync] Erreur: " . $e->getMessage());
            return self::FAILURE;
        }
    }

    /**
     * Teste la connexion √† l'API
     */
    protected function testConnection(): int
    {
        $this->info('üîç [CP Sync] Test de connexion...');

        try {
            $result = $this->cpExport->testConnection();

            if ($result['success']) {
                $this->info('‚úÖ [CP Sync] Connexion r√©ussie');
                $this->line('üì° Endpoint: ' . config('sync_export.endpoint'));
                $this->line('üîë Token configur√©: ' . (config('sync_export.token') ? 'Oui' : 'Non'));
                return self::SUCCESS;
            } else {
                $this->error('‚ùå [CP Sync] Connexion √©chou√©e: ' . $result['message']);
                return self::FAILURE;
            }
        } catch (Exception $e) {
            $this->error('‚ùå [CP Sync] Erreur de test: ' . $e->getMessage());
            return self::FAILURE;
        }
    }

    /**
     * Affiche l'√©tat actuel de synchronisation
     */
    protected function showSyncState(): void
    {
        $this->info('üìä [CP Sync] √âtat de synchronisation:');
        $this->newLine();

        $state = $this->cpExport->getSyncState();

        $headers = ['Table', 'Dernier ID', 'Derni√®re sync'];
        $rows = [];

        foreach ($state as $item) {
            $rows[] = [
                $item->table_name,
                number_format($item->last_inserted_id),
                $item->last_synced_at ? $item->last_synced_at : 'Jamais'
            ];
        }

        $this->table($headers, $rows);
    }

    /**
     * Compte le nombre de lignes dans la r√©ponse
     */
    protected function countRowsInResponse(array $response): int
    {
        $total = 0;
        $tables = $response['tables'] ?? [];

        foreach ($tables as $table => $block) {
            $total += count($block['rows'] ?? []);
        }

        return $total;
    }

    /**
     * V√©rifie s'il y a encore des donn√©es √† traiter
     */
    protected function hasMoreData(array $response): bool
    {
        $tables = $response['tables'] ?? [];

        foreach ($tables as $table => $block) {
            if (($block['has_more'] ?? false) === true) {
                return true;
            }
        }

        return false;
    }
}
